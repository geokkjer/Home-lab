# <type>(<scope>): <description>
#
# <body>
#
# <footer>

# --- COMMIT MESSAGE GUIDELINES ---
# 
# FORMAT:
# <type>(<scope>): <description>
# 
# [optional body]
# 
# [optional footer]
#
# TYPES:
# feat     - New feature or module
# fix      - Bug fix
# docs     - Documentation changes
# style    - Formatting, missing semicolons, etc.
# refactor - Code refactoring
# test     - Adding tests
# chore    - Maintenance tasks
#
# SCOPES:
# Machine:     (congenital-optimist), (sleeper-service), (grey-area), (reverse-proxy)
# Module:      (desktop), (virtualization), (users), (network), (security)
# Config:      (flake), (ci), (git)
# Docs:        (readme), (plan), (branching)
#
# DESCRIPTION:
# - Use imperative mood: "add", "fix", "update" (not "added", "fixed", "updated")
# - Keep under 50 characters
# - Start with lowercase
# - No period at end
#
# BODY:
# - Explain what and why, not how
# - Wrap at 72 characters
# - Separate from description with blank line
#
# FOOTER:
# - Reference issues: "Fixes #123", "Related to #456"
# - Breaking changes: "BREAKING CHANGE: description"
#
# EXAMPLES:
# feat(desktop): add cosmic desktop environment module
# fix(virtualization): resolve incus networking configuration
# docs(readme): update installation instructions
# refactor(modules): reorganize desktop environment structure
# chore(ci): update github actions workflow
# feat(sleeper-service): implement nfs server configuration
# fix(congenital-optimist): resolve zfs boot failure
#
# Keep commits focused and atomic. Each commit should represent
# a single logical change that can be easily reviewed and reverted.
